Tidak, fitur Live Server dan server pada Node.js memiliki perbedaan dalam konteks penggunaan dan fungsionalitas.

1. **Live Server**:
   Live Server adalah fitur yang biasanya digunakan dalam lingkungan pengembangan web lokal (local development) menggunakan editor kode seperti Visual Studio Code (VSCode). Fitur ini memungkinkan Anda untuk menjalankan proyek web Anda secara lokal dengan cepat dan efisien. Live Server secara otomatis menyajikan proyek Anda melalui server sementara yang berjalan di port tertentu pada localhost. Fitur ini biasanya digunakan untuk melihat perubahan kode secara real-time dalam browser tanpa harus melakukan refresh manual setiap kali Anda menyimpan perubahan di editor kode.

2. **Server pada Node.js**:
   Ketika kita berbicara tentang server pada Node.js, kita berbicara tentang membangun aplikasi server menggunakan platform Node.js. 
Dalam hal ini, Anda menggunakan kode JavaScript di sisi server untuk mengatasi permintaan dari klien dan memberikan respons. 
Server pada Node.js biasanya digunakan untuk membuat aplikasi web, API, atau bahkan aplikasi real-time seperti aplikasi chat atau permainan yang memerlukan koneksi dua arah antara klien dan server.

**Perbedaan:**
- Live Server hanyalah fitur pengembangan lokal untuk menyajikan halaman web di browser saat Anda mengembangkan proyek. Ia hanya berfungsi untuk melihat perubahan secara real-time pada proyek Anda di browser.
- Server pada Node.js adalah lingkungan runtime yang memungkinkan Anda membangun aplikasi server-side yang dapat melayani permintaan dari klien dan memberikan respons sesuai.

**Manakah yang Terbaik untuk Digunakan?**
Keduanya memiliki peran dan penggunaan yang berbeda:
- Jika Anda ingin mengembangkan proyek web lokal dan melihat perubahan secara real-time saat mengedit kode, fitur Live Server sangat berguna dan nyaman untuk digunakan.
- Jika Anda perlu membangun aplikasi server-side atau API, atau jika Anda ingin menjalankan proyek web secara live secara online, maka Anda harus menggunakan server pada Node.js untuk menyajikan aplikasi Anda.

Dalam banyak kasus, Anda bahkan dapat menggunakan keduanya bersama-sama. Anda dapat mengembangkan proyek lokal dengan bantuan Live Server dan pada saat yang sama menggunakan server Node.js untuk mengatasi permintaan dari klien dan menyajikan aplikasi web Anda secara live secara online.







untuk buka terminal pada file yang diinginkan dan buat file package.json :
klik kanan pada file -> pilih opsi open inintegrated terminal -> npm init 





selanjutnya untuk menjadi seorang Back-End Developer tentu Anda perlu
mengetahui bekal yang harus dimiliki dalam membangun sebuah aplikasi back-end atau web service.
singkatnya bak-end itu adalah pembuatan web service.dan nodeJS bisa digunakan dalam membuat web service.

Node.js berhasil menjadi JavaScript Runtime yang dapat mengeksekusi kode JavaScript di luar browser. 
JavaScript menjadi salah satu pilihan tepat dalam membangun web server, terlebih bila Anda adalah seorang Front-End Web Developer. 
Anda tentu tidak perlu menggunakan bahasa yang berbeda dalam membangun Back-End. 
Anda bisa menjadi Full-Stack Developer dengan mempelajari satu bahasa pemrograman saja.


NPM alias Node Package Manager merupakan JavaScript Package Manager bawaan dari Node.js. 
Melalui NPM ini kita dapat membuat Node.js package (proyek) dan 
mengelola penggunaan package eksternal yang digunakan.

membuat proyek node-js dengan mengetik perintah "npm init"
dan nanti akan diberikan pertanyaan untuk buat file json.jika sudah selesai jawab 
pertanyaannya maka sudah berhasil membuat proyek node js.


~
Terdapat dua cara dalam menjalankan kode JavaScript menggunakan Node.js. 
Yang pertama dengan memanfaatkan Node REPL dan yang kedua dengan mengeksekusi berkas berekstensi JS.

a.)Node.js memiliki fitur REPL atau Read-Eval-Print Loop. Sesuai namanya, 
fitur ini berfungsi untuk membaca kode JavaScript, mengevaluasi kode tersebut, kemudian mencetak hasil evaluasinya ke console. 
Nah, untuk loop, berarti proses tersebut selalu berulang.
REPL merupakan fitur bawaan dari Node.js. Anda bisa mengaksesnya menggunakan perintah node pada Terminal(ketik perintah 'node'). 

#di dalam REPL terdapat mode editor yang berfungsi untuk menuliskan kode JavaScript lebih dari satu baris. 
Untuk menggunakan mode editor, Anda bisa tuliskan perintah .editor(ketik perintah '.editor').
Ketika masuk ke mode editor, Anda bisa secara leluasa menuliskan kode JavaScript lebih dari satu baris menggunakan enter. 
Fungsi untuk mengeksekusi kode digantikan dengan kombinasi tombol CTRL+D. 
dan Untuk keluar dari mode editor, gunakan kombinasi CTRL+C.

#Nilai variabel yang Anda buat di REPL dapat diakses selama Anda masih berada di dalam REPL. 
Jika Anda menutup Terminal atau keluar dari REPL menggunakan perintah .exit(ketik perintah '.exit'),
variabel yang sudah Anda buat sebelumnya tidak bisa diakses kembali. Itu artinya, REPL hanya menyimpan memory ketika session masih berlangsung.
Fitur REPL sangat berguna ketika Anda hendak melakukan kalkulasi sederhana, bereksperimen, atau 
belajar potongan kode JavaScript. Karena melalui REPL Anda bisa mengeksekusi kode JavaScript dan 
mendapatkan hasil dengan cepat tanpa harus membuat berkas JavaScript terlebih dahulu.


2.)Running JavaScript File using Node.js
Cara lain untuk mengeksekusi kode JavaScript menggunakan Node.js adalah melalui berkas JS. Silakan buat berkas JavaScript pada proyek anda.
Didalam berkas javascript yang dibuat, Anda bisa menuliskan kode JavaScript sesuka Anda. Pastikan kode yang Anda tulis menampilkan nilai di console,
jadi Anda bisa melihat nilai yang tampak pada console.
Untuk mengeksekusi kode yang dibuat diberkas javascript, silakan simpan perubahan berkasnya dan buka kembali Terminal dengan menjalankan perintah 
node <nama-folder>.
contoh : node index.js
alhasil Node.js pun akan mengeksekusi berkas �index.js�.


~Node.js Global Object
Node.js pun demikian, ia menambahkan objek global guna memberikan fungsionalitas lebih pada JavaScript. 
Hal ini bertujuan untuk mendukung pengembangan pada environment-nya. 
Contoh, melalui objek global kita dapat melihat berapa CPU yang digunakan pada komputer,
modularisasi berkas JavaScript, menampilkan nilai pada console, dan hal lainnya.
objek global pada Node.js merupakan Global Object.

#Seluruh fungsi atau properti yang menjadi member dari global object dapat diakses di mana saja alias memiliki cakupan global. Pada Node.js Anda bisa melihat apa saja yang 
termasuk member dari global objek dengan menggunakan kode berikut:
	Object.getOwnPropertyNames(global);
Coba jalankan pada REPL. Ia akan mengembalikan semua member-nya.

Banyak sekali member dari global objek. Namun dilansir dari website Node.js, sebenarnya mereka hanya menambahkan beberapa objek saja.
Objek tersebut dinamakan dengan �true globals�. Berikut adalah daftarnya:

-global : Global namespace. Member apa pun di dalam object ini dapat diakses pada cakupan global.
-process : menyediakan interaksi dengan proses Node.js yang berjalan.
-console : menyediakan berbagai fungsionalitas STDIO.
-setTimeout, clearTimeout, setInterval, clearInterval.

Ada juga objek yang merupakan �pseudo-globals� atau objek global semu. Objek ini tidak terlihat bila dicetak menggunakan 'Object.getOwnPropertyNames(global)' 
sebab ia bukan member langsung dari objek global, melainkan diturunkan dari cakupan module. Karena pada Node.js semua berkas JavaScript adalah module,
jadi pseudo-globals dapat diakses layaknya global objek. Berikut adalah daftarnya:

module : digunakan untuk sistem modularisasi pada Node.js.
__filename : keyword untuk mendapatkan lokasi berkas JavaScript yang dieksekusi. Keyword ini tidak tersedia pada Node.js REPL.
__dirname : keyword untuk mendapatkan root directory dari berkas JavaScript yang dieksekusi.
require : digunakan untuk mengimpor module JavaScript.


~process object
Salah satu global objek yang penting untuk diketahui adalah process.
Anda bisa melihat proses yang sedang berjalan pada komputer Anda melalui Task Manager (Windows).

Pada Node.js, global objek process memiliki fungsi dan properti yang dapat memberikan informasi mengenai proses yang sedang berjalan.
Salah satu yang sering digunakan adalah properti 'process.env'. Melalui properti ini kita dapat menyimpan nilai atau mendapatkan informasi mengenai environment yang digunakan selama proses sedang berlangsung. 
Contoh, process.env memiliki properti 'process.env.PWD' yang menyediakan informasi mengenai lokasi di mana proses dijalankan.
Anda juga bisa secara manual menyimpan nilai di dalam process.env. Hal ini berguna untuk menentukan alur code seperti if-else dalam program berdasarkan environment yang Anda berikan.

a.)objek process memiliki kegunaan lain. Salah satunya adalah mendapatkan informasi tentang penggunaan CPU ketika proses berjalan. 
Anda dapat mengakses informasi tersebut melalui fungsi :
process.memoryUsage().

b.)properti 'process.argv'
Properti ini dapat menampung nilai baris perintah dalam bentuk array ketika menjalankan proses.


~Modularization
Idealnya, satu berkas JavaScript hanya memiliki satu tanggung jawab saja. Bila lebih dari satu, itu berarti Anda perlu berkenalan dengan modularisasi.
Modularisasi dalam pemrograman merupakan teknik pemisahan kode menjadi modul-modul yang bersifat independen namun bisa saling digunakan untuk membentuk suatu program yang kompleks. Pemisahan kode menjadi modul-modul terpisah inilah yang dapat membuat kode JavaScript lebih mudah diorganisir.
Pada Node.js, setiap berkas JavaScript adalah modul. Anda bisa membagikan nilai variabel, objek, class, atau apa pun itu antar modul. Untuk melakukannya, Anda perlu mengekspor nilai pada module tersebut.
Untuk mengekspornya, simpanlah nilai tersebut pada properti module.exports.

-Jika Anda hendak mengimpor modul lokal (local module), selalu gunakan tanda './' di awal alamatnya. 
-Anda juga bisa menggunakan tanda '../' untuk keluar dari satu level folder.

#Untuk memudahkan developer dalam proses pengembangan, Node.js menyediakan beberapa modul bawaan yang dapat Anda manfaatkan 
guna mendukung efisiensi untuk melakukan hal-hal yang umum. Modul bawaan tersebut dikenal sebagai core modules. 
Anda bisa mengimpor core modules dengan fungsi yang sama, yakni require(). contohnya :
// Mengimpor core module http
const http = require('http'); 

Lokasi core module dituliskan tidak seperti local module. Lokasi bersifat mutlak (core module disimpan folder lib pada lokasi Node.js dipasang) 
sehingga kita cukup menuliskan nama modulnya saja.

#Ada 3 jenis modul pada Node.js, Anda sudah mengetahui dua di antaranya. Berikut rinciannya:
local module : module yang dibuat secara lokal berlokasi pada Node.js project Anda.
core module : module bawaan Node.js berlokasi di folder lib di mana Node.js terpasang pada komputer Anda. Core module dapat digunakan di mana saja.
third party module : module yang dipasang melalui Node Package Manager. Bila third party module dipasang secara lokal, maka modul akan disimpan pada folder node_modules di Node.js project Anda. Bila dipasang secara global, ia akan disimpan pada folder node_modules di lokasi Node.js dipasang.


~NPM
NPM dapat digunakan untuk memasang atau menghapus third party module (modul pihak ketiga). 
Modul yang dipasang melalui NPM akan disimpan pada folder node_modules.

Terdapat dua tipe pemasangan modul melalui NPM: yakni global dan lokal. 
Bila modul dipasang secara global, maka modul tersebut akan bersifat layaknya core module dan dapat digunakan di mana pun. 
Sedangkan modul yang dipasang secara lokal hanya dapat digunakan pada cakupan project Node.js yang memasangnya saja.

disarankan untuk memasang modul pihak ketiga secara lokal saja. Hindari pemasangan modul secara global karena akan menyebabkan banyak masalah.
-Package yang dipasang secara lokal melalui NPM akan tercatat di dalam berkas package.json, lebih tepatnya pada objek dependencies.

#NPM juga bisa berfungsi sebagai runner script. Ia dapat menjalankan script yang dituliskan pada objek scripts yang ada di berkas package.json. Dengan menetapkan script pada package.json, Anda dapat membuat jalan pintas untuk menjalankan Node.js process. 
Selain itu, Anda bisa membuat lebih dari satu script sesuai dengan environment yang Anda inginkan.


~Events
Aplikasi Node.js biasanya dikenal memiliki pola event-driven atau memiliki alur berdasarkan suatu kejadian.
Contohnya ketika berjalan dan tiba-tiba turun hujan, kita bergegas menggunakan payung; ketika ponsel berdering, kita bereaksi dengan mengangkat panggilan; ketika merasa lapar, kita makan. Seperti inilah pola yang terjadi di kehidupan nyata, sudah sejak lama kita bertahan hidup dengan pola seperti ini. 
Inilah yang dimaksud dengan pola event-driven.

#program komputer juga harus bekerja dengan pola event-driven. Syukurlah dengan Node.js kita dapat menerapkan pola tersebut dengan mudah.
Node.js menyediakan EventEmitter class yang merupakan member events core module:

const { EventEmitter } = require('events');
 
const myEventEmitter = new EventEmitter();

Setiap instance dari EventEmitter akan memiliki fungsi on. Pada fungsi tersebut, kita dapat menentukan aksi berdasarkan sebuah kejadian.
Fungsi on menerima dua buah argumen, yang pertama adalah nama event dan yang kedua adalah listener atau fungsi yang akan dieksekusi ketika event terjadi.
contoh :

// fungsi yang akan dijalankan ketika event coffee-order terjadi
const makeCoffee = ({ name }) => {
    console.log(`Kopi ${name} telah dibuat!`);
};
 
// mendaftarkan fungsi makeCoffee sebagai listener event coffee-order
myEventEmitter.on('coffee-order', makeCoffee);


-Anda bebas menentukan nama event yang diberikan pada argumen fungsi on. 
Jika nama event lebih dari dua kata, latihan terbaiknya adalah memisahkannya dengan tanda garis (-) bukan menggunakan spasi.

-Anda juga bisa mendaftarkan lebih dari satu fungsi listener pada sebuah event menggunakan fungsi on.
contoh :
myEventEmitter.on('coffee-order', makeCoffee);
myEventEmitter.on('coffee-order', makeBill);

#Setiap instance dari EventEmitter juga memiliki fungsi emit() yang berguna untuk membangkitkan event.
Fungsi emit() menerima nilai argumen sebanyak apa pun yang Anda mau, namun nilai yang pertama merupakan nama dari event yang akan dibangkitkan, argumen kedua dan seterusnya adalah 
nilai yang akan digunakan untuk menjadi dari parameter fungsi listener.
contoh :
// Memicu event 'coffee-order' terjadi.
myEventEmitter.emit('coffee-order', { name: 'Tubruk' });

#Atau Anda bisa membuat satu fungsi khusus untuk menangani event. Biasanya fungsi ini memiliki nama �handler� atau �listener� pada akhir penamaanya.
contoh :
const makeCoffee = (name) => {
    console.log(`Kopi ${name} telah dibuat!`);
};
 
const makeBill = (price) => {
    console.log(`Bill sebesar ${price} telah dibuat!`);
}

const onCoffeeOrderedListener = ({ name, price }) => {
    makeCoffee(name);
    makeBill(price);
}
myEventEmitter.on('coffee-order', onCoffeeOrderedListener);
 
myEventEmitter.emit('coffee-order', { name: 'Tubruk', price: 15000 });


~Filesystem
Seluruh data di komputer dikelola dan diakses melalui filesystem. Ketika menjalankan kode JavaScript pada browser, sangat penting untuk melimitasi JavaScript dalam mengakses filesystem. Teknik ini dinamakan dengan sandboxing. Sandboxing melindungi kita dari program jahat serta tindakan pencurian yang dapat merampas privasi penggunanya.
Bagaimana dengan JavaScript yang dijalankan di back-end? Limitasi tentu tetap ada, namun tidak seketat ketika JavaScript dieksekusi pada browser. Di back-end malah filesystem menjadi fitur esensial karena dalam pengembangan back-end akan sering sekali mengakses atau menulis sebuah berkas di dalam komputer. 
Node.js menyediakan core modules fs yang dapat mempermudah kita dalam mengakses filesystem. Setiap method yang ada di module fs tersedia dalam dua versi, yakni versi asynchronous (default) dan versi synchronous. 

#Untuk mengakses berkas pada komputer kita dapat menggunakan method 'fs.readFile()'.
Method ini menerima tiga argumen yakni: lokasi berkas, encoding, dan callback function yang akan terpanggil bila berkas berhasil/gagal diakses.
contoh :
const fs = require('fs');
 
const fileReadCallback = (error, data) => {
    if(error) {
        console.log('Gagal membaca berkas');
        return;
    }
    console.log(data);
};
 
fs.readFile('todo.txt', 'UTF-8', fileReadCallback);

#Sebagai alternatif, Anda juga bisa gunakan method versi synchronous 'fs.readFileSync()'.
contoh :
const fs = require('fs');
 
const data = fs.readFileSync('todo.txt', 'UTF-8');
console.log(data);



~Readable Stream
Pada materi sebelumnya Anda sudah mengetahui cara mengakses berkas melalui fungsi 'fs.readFile()'. Fungsi readFile baik versi asynchronous ataupun synchronous, bekerja dengan membaca berkas hingga selesai sebelum mengembalikan data. Itu berarti bila Anda menggunakannya untuk mengakses berkas yang besar, maka akan membutuhkan waktu lama dan memori yang besar untuk mendapatkan hasilnya. Hal ini sungguh tidak efektif.
Solusinya adalah dengan menggunakan teknik stream. Teknik ini tidak membaca berkas secara sekaligus, tapi dengan mengirim bagian demi bagian.

#Teknik stream merupakan salah satu konsep fundamental yang mendukung aplikasi Node.js bekerja. 
Teknik ini dapat menangani kasus baca tulis berkas, komunikasi jaringan, atau beban kerja apapun agar dapat berjalan dengan lebih efisien, 
dan juga membaca teks pada berkas secara bagian-per-bagian.

#Kita dapat membuat readable stream dengan menggunakan method createReadStream() dari core module fs.
contoh :
const fs = require('fs');
 
const readableStream = fs.createReadStream('./article.txt', {
    highWaterMark: 10
});

keterangan :
Fungsi createReadStream() menerima dua argumen. Yang pertama adalah lokasi berkas yang hendak dibaca, dan yang kedua adalah objek konfigurasi. Di dalam objek konfigurasi kita bisa menetapkan ukuran buffer melalui properti highWaterMark. Nilai default dari properti ini adalah 16384 bytes (16kb). Anda tidak perlu menetapkan properti ini bila ingin tetap memiliki nilai default. Namun karena kita hanya menggunakan berkas teks yang ukurannya sangat kecil, jadi kita buat ukuran buffer menjadi 10 bytes. Itu artinya berkas akan dibaca setiap 10 karakter (1 karakter = 1 bytes).
Buffer di dalam stream adalah memori sementara yang digunakan oleh stream dalam menyimpan data hingga data tersebut dikonsumsi.


~Writable Stream
Pada materi sebelumnya kita sudah belajar bagaimana membaca berkas menggunakan teknik stream (readable stream). Tapi apakah Anda tahu bahwa teknik stream juga dapat digunakan untuk menulis berkas? Teknik ini disebut writable stream.
Untuk membuat writable stream dalam menulis berkas gunakanlah method createWriteStream() dari core module fs.
contoh :
const fs = require('fs');
 
const writableStream = fs.createWriteStream('output.txt');

-Fungsi ini menerima satu argumen yakni alamat berkas untuk menyimpan hasil data yang dituliskan. Berkas output akan dibuat secara otomatis jika tidak ada, namun bila berkas tersebut sudah ada, maka data sebelumnya akan tertimpa! Anda harus hati-hati yah!
-Lalu untuk menuliskan data pada writable stream, gunakan method write().
contoh :
const fs = require('fs');
 
const writableStream = fs.createWriteStream('output.txt');
 
writableStream.write('Ini merupakan teks baris pertama!\n');
writableStream.write('Ini merupakan teks baris kedua!\n');
writableStream.end();

-Method end() digunakan untuk menandakan akhir dari writable stream sekaligus bisa digunakan sebagai penulisan writeable terakhir.
contoh :
const fs = require('fs');
 
const writableStream = fs.createWriteStream('output.txt');
 
writableStream.write('Ini merupakan teks baris pertama!\n');
writableStream.write('Ini merupakan teks baris kedua!\n');
writableStream.end('Akhir dari writable stream!');
